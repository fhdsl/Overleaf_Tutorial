[["index.html", "Introduction to LaTeX and Overleaf About this Course", " Introduction to LaTeX and Overleaf January, 2023 About this Course This course is part of a series of courses for the Informatics Technology for Cancer Research (ITCR) called the Informatics Technology for Cancer Research Education Resource. This material was created by the ITCR Training Network (ITN) which is a collaborative effort of researchers around the United States to support cancer informatics and data science training through resources, technology, and events. This initiative is funded by the following grant: National Cancer Institute (NCI) UE5 CA254170. Our courses feature tools developed by ITCR Investigators and make it easier for principal investigators, scientists, and analysts to integrate cancer informatics into their workflows. Please see our website at www.itcrtraining.org for more information. You can download the illustrations by clicking here. "],["introduction.html", "Chapter 1 Introduction 1.1 Motivation 1.2 Target Audience 1.3 Curriculum", " Chapter 1 Introduction This course is meant to get you started writing scientific manuscripts using LaTeX in Overleaf. 1.1 Motivation Overleaf is a very useful tool for collaborative scientific writing. It has an advantage over other potential collaborative writing options in that it enables for seamless changes in formatting and arrangement of text to allow you to submit to various publication platforms, such as preprint archives or scientific journals. Another advantage of Overleaf is that it is based on using LaTeX which makes it easy to add mathematical formulas to your writing. It also helps you do really complicated formatting and layouts with much more ease than other options and it makes it easy to replicate that complicated formatting/layout again for other papers or other writing products. It is widely used in certain fields like statistics and computer science. Therefore, it can also be useful to know about if you have collaborators in these fields. 1.2 Target Audience The course is intended for scientific writers who might be interested in learning how to automate some of their writing formatting/layouts. 1.3 Curriculum The course covers basic information about why LaTeX can be useful, how to get started in overleaf using LaTeX with a template, how to work with a team on Overleaf, and what to do when you encounter problems. "],["latex.html", "Chapter 2 LaTeX 2.1 Learning Objectives 2.2 Document Preparation System 2.3 History 2.4 Process 2.5 Benefits of LaTeX 2.6 Conclusion", " Chapter 2 LaTeX You may or may not have heard people talking about LaTeX (pronounced ‘/ˈlɑːtɛx/’ LAH-tekh or ‘/ˈleɪtɛx/’ LAY-tekh), not to be confused with the the material latex (pronounced ‘/ˈleɪtɛks/’ LAY-tekhs). In this course we will explain what LaTeX is and how it came to be. 2.1 Learning Objectives 2.2 Document Preparation System LaTeX is a “document preparation system” according to the LaTeX project (“LaTeX - A Document Preparation System” n.d.). It is often used to write scientific or technical documents, but it can be used for formatting or arranging any type of document. This process of determining the final look of a writing product is called typesetting. Typesetting determines how text looks and where it is located in a document when it is it’s final stage - like when it is rendered or printed. It has to do with fonts, text sizing, line spacing, the arrangement of tables and images, and more. Although LaTeX has a reputation for being quite tricky, it is very powerful in enabling users to create documents with complex and customized text formatting and layouts with much more ease than doing so using systems like Microsoft Word. 2.3 History LaTeX was originally released in 1984 by Leslie Lamport. LaTeX is one of several programs (but probably the most widely used in academia - in part, because it is free!) that makes it easier to use the typesetting system called TeX. Why is it called LaTeX? The “La” is believed to be for Lamport’s last name. The “Tex” is for the typesetting system Tex. 2.3.1 TeX TeX (pronounced ‘/ˈtɛx/’ tekh) is a typesetting system developed by Donald E. Knuth in the 1970s to help him format the text in his books more to his satisfaction (“TeX” 2022). Why is it called Tex? Tex is named as an abbreviation for the Greek word τέχνη (ΤΕΧΝΗ techn), which directly translates to art or craft (“TeX” 2022). Typesetting has origins in how documents used to be printed using manual stamping mechanisms, where someone would provide the contents of the text in writing by hand that would be translated to a version with the intended layout and style for printing. Overtime this process got replaced by digital options and eventually resulted in the concept of WYSIWYG (What you see is what you get), where programs like Microsoft Word, let you interactively work with the typesetting of a document as you write the content. In a sense using LaTeX/TeX is kinda taking a step back in time to think about the fact that when you use a program like Microsoft Word, you are essentially giving it two sets of directions simultaneously, one which is the content of the text, and one which is the style and layout of the text. With LaTeX we are more aware that we are actually telling the computer how to arrange the text. It also gives us much more control of how we arrange, format, and style the text. If you are really interested in taking a deep dive into understanding how this all came to be, check out this blog post by Tirado (2020) and this O’Reilly book by Walsh (1994). 2.4 Process LaTeX can also be called a markup language. These means that certain text tags can be used to indicate how the content text should be formatted or displayed. Another example of a markup language is HTML (which actually stands for HyperText Markup Language), which has text tags to indicate how the content text should be displayed on webpages. It is often used in computer science to enable humans to read or write files more easily and for computers to interpret these files more easily. Let’s use a simple example of making some text bold to illustrate this. Microsoft Word: If we wanted to some text bold in Microsoft Word, we would type the plain text that we want to bold just like the rest of the text. We would then select that text and click some buttons to make the text bold. HTML: In HTML we could instead use &lt;b&gt; at the beginning of the text we want to bold, and &lt;/b&gt; at the end to indicate that this text should be bold when it is rendered into it’s final state. LaTeX: Just like in HTML, LaTeX also uses text around the actual content text to describe how to produce the final product. In this case, we would indicate that we want bold text using a tag \\textbf with brackets around the text we want to change like so: \\textbf{bold text}. As you can see, LaTeX will feel a bit different from writing in Microsoft Word, as we will be using text tags to define how we want the content text to look. 2.5 Benefits of LaTeX Now that you are a little more clear about what LaTeX is, it might be easier to appreciate it’s benefits: Allows you to focus on the content and worry less about formatting (once you have a good template to work with). There are many specific templates to use format documents for various goals, such as formatting manuscripts for scientific journals. Allows for much more customization for complex typesetting/formatting of text. Once you have a template you like working with, say for a journal you frequently publish with, it is super easy to format future similar documents. If you need to change the typesetting/formatting of a document for the requirements of a different journal or preprint archive, you can do it much quicker and with more ease than if you were to do it manually using a text editor like Microsoft Word. You can add languages with different alphabets or mathematical notation with much more ease than with traditional text editors You can collaborate with people who use LaTeX more easily 2.6 Conclusion We hope that this chapter has given you some more knowledge about what LaTeX is and how it came to be, as well as the benefits of using it. In conclusion, here are some of the major take-home messages: Computers actually separate document creation into two tasks, creating the content text and arranging and styling that text. Traditional text editors like Microsoft Word show us what the final document will look like as we write it. LaTeX is a document preparation system that makes it easier to use the typesetting system TeX and allows you to create very complicated documents. Typesetting has to do with all the style, layout, and formatting that a document might need. LaTeX is a markup language and similar to HTML. Text tags around the content text can be used to indicate how the document should look when rendered into the final state. LaTex allows you to more easily change how your document is laid out, which can be super beneficial if you need to accommodate different scientific journal requirements. Although LaTeX is used frequently in computer science, mathematics, statistics, and engineering fields to write technical papers, it can be used for other kinds of documents too! References "],["overleaf.html", "Chapter 3 Overleaf 3.1 Benefits of Overleaf 3.2 Getting Started 3.3 Working with Templates 3.4 Viewing documents 3.5 Making changes 3.6 Conclusion", " Chapter 3 Overleaf Overleaf is an online free LaTeX editor, meaning it helps you write text using LaTeX to determine how your document will look. In this chapter we will introduce you to Overleaf and get you set up to start creating a document. Since LaTeX can be pretty tricky, Overleaf can be super helpful! As a LaTeX editor, Overleaf helps you by showing you what the result of your LaTeX tags will be, suggests possible LaTeX tags, and provides you with helpful guidance. We will learn more about each of these soon. 3.1 Benefits of Overleaf There are other LaTeX editors, but Overleaf is a really nice option for a number of reasons: It is free! It’s online and requires no installations. It makes it much easier to write using LaTeX. It can continually show you a preview of your final document. It makes it easy to collaborate with others. There is lots of online support. It can sync with GitHub or Dropbox (if you pay for a paid plan). 3.2 Getting Started To start, you need to make an account on Overleaf. To do so, you can go to https://www.overleaf.com/register in your browser. There are several ways to register: Register with an IEEE account Register with your Google account Register with your ORCID account Register with a different email address Log in with an institution. This is worth checking in case your university has a license, as this may provide you with more features. The free version only allows you to have one collaborator on a project, so collaboration is more limited, however you can still benefit from many of the other features. Note that students can receive a discount as well. If possible it might be worth seeing if your institute would be willing to get an organizational license. 3.3 Working with Templates Overleaf is organized with projects. When you create a project, you can start from scratch or start from a template. Let’s start with a template to help us better understand the features of Overleaf. We can search through all the templates by clicking on “View All” button of the project menu. We can also click on the “templates” tab to get to the same template search page. You can see that there are many templates to choose from! There are templates for writing a letter, writing a thesis, writing a CV, writing a book and more. Tip! - If you need to write a thesis or you have a student that needs to write one, check to see if your university or department has a LaTeX template that you can use to help everyone save time on formatting and spend more time writing the content. Let’s search for a term, such as “preprint” to see if the templates for preprints. You will see that a few of the templates have a blue “official” tag. This is the best option if you find one for the publisher that you are interested in. We will use a template for arXiv. You can go to this link: https://www.overleaf.com/latex/templates/style-and-template-for-preprints-arxiv-bio-arxiv/pkzcrhzcdxmc to start with the same particular template to create a manuscript for arXiv. Click the “Open as Template” button to get started. 3.4 Viewing documents So now that we have opened a template, we will start by understanding how we can view our work on Overleaf. For starters, it easily shows you what the rendered version of your text will look like, taking into account the LaTeX tags that indicate how the text should be arranged and styled. The default view is to see the raw text (aka source text) on the left and the rendered/compiled version on the right. You can also change the view to several other options: If you are using the default view and you want to see what the file looks like in the rendered form for the same location as that of the source text of the editor, you can click on the arrow (with the arrowhead facing to the right) in between. To do the opposite and go to the location in the source text where you are currently viewing in the rendered text, click the arrow button facing the source text editor. If you make a change in the source and want to see how it changes the look of the file, you need to press the “Recompile” button. It is a good idea to press the “Recompile” button frequently, so that you can identify any errors more easily. If you wait too long to check, then you will have more new changes to look through to try to understand the error. 3.5 Making changes Now let’s try some simple changes to sart getting used to writing with LaTeX. First let’s change the tilte. We can find the title where the file says “Predict future sale”. You can use search the source editor text by clicking on the editor and using the search and find keyboard shortcut (control and the F key). We can type in the “Predict future sale” text to find it. We will find it on line 19 following \\title. We can search the source text by click on the editor pane and typing the shortcut keys for find functions (control F). We can now replace the text with our own title. Be careful to make sure that the brackets are closed around the replacement text. Now we can click the “Recompile button” to see the results. After overleaf is done compiling, you can see that the title has been changed. Congratulations! You just made your first edit in Overleaf. In the next chapter, we will take a deeper dive into editing documents. 3.6 Conclusion We hope that this chapter has given you some more knowledge about what Overleaf is and how it can help you write documents, as well as the benefits of using it. In conclusion, here are some of the major take-home messages: Overleaf is a collaborative LaTeX editor, that helps you write documents using LaTeX. Benefits of Overleaf include: it’s free (although you can pay for more features), it’s online and requires no installations, it shows you a preview of how your document will look, it makes it easier to collaborate with others. To use Overleaf you need to make an account first, which takes just a few minutes. There are many templates that you can use to write many different types of documents, including journal articles, CVs, graphics, and more! Some journals have even vetted templates to be their official template, look for the blue “official” tag. It’s a good idea to keep pressing the “recompile” button often as you make changes so that you can more easily see what might be causing an error if something goes wrong. "],["writing-with-overleaf.html", "Chapter 4 Writing with Overleaf 4.1 LaTeX Basics", " Chapter 4 Writing with Overleaf Now that you know the advantages of using overleaf and have started working with a template, we will now discuss more about how to make additional modifications to your document. 4.1 LaTeX Basics Since we are working with a template, it isn’t necessary to learn everything there is to know about writing in LaTeX to get started. However, it can be useful to understand some fundamentals, so we will go over most of the commands that you see listed in the template. 4.1.1 Document Class At the top of the template you will notice \\ducumentclass{article}. This specifies general typesetting information about the type of document that we intend to make. For example, it often specifies font size, the overall layout of the text, and alignment of various features of the text. Since we are writing a scientific article, the specification here is article. To learn more about document classes see this documentation link form Wu (n.d.). 4.1.2 Packages Next you will see that \\usepackage{} is repeated several times with different information in the brackets: We will refer to these tags with brackets such as \\usepackage{} as commands from now on (as this is what the are generally referred to) and they cause a change to either the text within the brackets or the overall document. The next commands install some packages. Packages are additional code to help you do additional things with your documents. If a command comes from a specific package, you will need to install the package that it comes from first. Commands from these packages will be utilized later in the template. It is recommended that you leave this code as is, and only modify the rest of the template until you learn more. In addition to determining what commands you can use, packages will also determine how the content is formatted or laid out. 4.1.3 Author section You may recall that we previously described how to bold font using \\textbf{bold text}. With LaTeX you will be using brackets often to designate what to do with a specific set of text that is contained within the brackets. If you do not close a set of brackets you will get an error, so be careful about this. Next, we see the \\title command that we previously worked with, as we already modified the text within the brackets to change the title. Then we see the \\author command to add authors to the paper. These will be formatted in the way that is shown on the template. When you see \\\\ two backslashes, this indicates that the line is finished and a new one is to be made. It is best to avoid using this for line breaks within the paragraphs that you might include in the paper, but for tables or formatting like the authors, it should work well. We also see another command \\textttt{} used within the \\author{} command to change the text to typewriter font. You may also notice %% examples of other authors is in green and does not show up in the rendered document. This is what is called a comment and it can be used to write notes about the material. In the author section, the \\And allows for additional authors to be added and needs to be used between each other. Finally, the author section needs to be completed by closing the brackets. 4.1.4 Beginning Commands The next command \\begin{document} enables us to format text for the body of the article. If you put %% in front of the command to change it to a comment and therefore not use the command, you will see that the document is formatted overall slightly differently. It will be paired with \\end{document} that you will see at the bottom of the template if you scroll down. The \\maketitle will add the title the page where the begin{document} command was used. Otherwise, if you used it before begin{document}, the title and authors will show up on a separate page first. You can test moving this command around to see how the document changes. 4.1.5 Abstract The abstract section can be distinguished using the begin{} and end{} functions just like we used for the body of the document. These two commands will be used later as well to indicate that a specific part of the document has started or ended. 4.1.6 Section commands: \\section{section name} - This will help you to create sections in our template. We don’t need to do anything to modify the text, it will automatically bold the text and number the sections (1, 2, 3 etc.). \\subsection{subsubsection name} - This will help you to create subsections, these headings will be one level down from the section headings and will be numbered like 1.1, 1.2. \\subsubsection{subsubsection name} - This will help you to create sections one level down from subsections, these heading will be numbered like 1.1.1, 1.1.2. In the template you can see how these are formatted: The \\paragraph{} command works similarly, but it will not be numbered. The text within the brackets is an optional word that is bold to start the paragraph. You can also leave it empty. However, you can specify if you want sections to be not be numbered as well when using an asterisks * between the command name and the brackets section*{}. 4.1.7 Dummy text You may notice that \\lipsum[] is used to create random chunks of text. The number within the brackets indicates how what specific dummy paragraph to use out of 150. 4.1.8 Equations It can be very helpful to include a mathematical equation. To do so we need to use our handy \\begin{equation} and \\end{equation} functions to indicate the boundaries. Using equation within the brackets indicates that this should be formatted in a certain way. It will center the text nicely and number it. For more information about mathematical expressions in overleaf see the Overleaf documentation. References "],["about-the-authors.html", "About the Authors", " About the Authors These credits are based on our course contributors table guidelines.     Credits Names Pedagogy Lead Content Instructor(s) Carrie Wright Lecturer(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved Delivered the course in some way - video or audio Content Author(s) (include chapter name/link in parentheses if only for specific chapters) - make new line if more than one chapter involved If any other authors besides lead instructor Content Contributor(s) (include section name/link in parentheses) - make new line if more than one section involved Wrote less than a chapter Content Editor(s)/Reviewer(s) Checked your content Content Director(s) Helped guide the content direction Content Consultants (include chapter name/link in parentheses or word “General”) - make new line if more than one chapter involved Gave high level advice on content Acknowledgments Gave small assistance to content but not to the level of consulting Production Content Publisher(s) Helped with publishing platform Content Publishing Reviewer(s) Reviewed overall content and aesthetics on publishing platform Technical Course Publishing Engineer(s) Helped with the code for the technical aspects related to the specific course generation Template Publishing Engineers Candace Savonen, Carrie Wright Publishing Maintenance Engineer Candace Savonen Technical Publishing Stylists Carrie Wright, Candace Savonen Package Developers (ottrpal) Candace Savonen, John Muschelli, Carrie Wright Art and Design Illustrator(s) Created graphics for the course Figure Artist(s) Created figures/plots for course Videographer(s) Filmed videos Videography Editor(s) Edited film Audiographer(s) Recorded audio Audiography Editor(s) Edited audio recordings Funding Funder(s) Institution/individual who funded course including grant number Funding Staff Staff members who help with funding   ## ─ Session info ─────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.2 (2020-06-22) ## os Ubuntu 20.04.3 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2023-01-08 ## ## ─ Packages ─────────────────────────────────────────────────────────────────── ## package * version date lib source ## assertthat 0.2.1 2019-03-21 [1] RSPM (R 4.0.3) ## bookdown 0.24 2022-02-15 [1] Github (rstudio/bookdown@88bc4ea) ## callr 3.4.4 2020-09-07 [1] RSPM (R 4.0.2) ## cli 2.0.2 2020-02-28 [1] RSPM (R 4.0.0) ## crayon 1.3.4 2017-09-16 [1] RSPM (R 4.0.0) ## desc 1.2.0 2018-05-01 [1] RSPM (R 4.0.3) ## devtools 2.3.2 2020-09-18 [1] RSPM (R 4.0.3) ## digest 0.6.25 2020-02-23 [1] RSPM (R 4.0.0) ## ellipsis 0.3.1 2020-05-15 [1] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [1] RSPM (R 4.0.3) ## fansi 0.4.1 2020-01-08 [1] RSPM (R 4.0.0) ## fs 1.5.0 2020-07-31 [1] RSPM (R 4.0.3) ## glue 1.6.1 2022-01-22 [1] CRAN (R 4.0.2) ## htmltools 0.5.0 2020-06-16 [1] RSPM (R 4.0.1) ## jquerylib 0.1.4 2021-04-26 [1] CRAN (R 4.0.2) ## knitr 1.33 2022-02-15 [1] Github (yihui/knitr@a1052d1) ## lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.2) ## magrittr 2.0.2 2022-01-26 [1] CRAN (R 4.0.2) ## memoise 1.1.0 2017-04-21 [1] RSPM (R 4.0.0) ## pkgbuild 1.1.0 2020-07-13 [1] RSPM (R 4.0.2) ## pkgload 1.1.0 2020-05-29 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [1] RSPM (R 4.0.3) ## processx 3.4.4 2020-09-03 [1] RSPM (R 4.0.2) ## ps 1.3.4 2020-08-11 [1] RSPM (R 4.0.2) ## purrr 0.3.4 2020-04-17 [1] RSPM (R 4.0.3) ## R6 2.4.1 2019-11-12 [1] RSPM (R 4.0.0) ## remotes 2.2.0 2020-07-21 [1] RSPM (R 4.0.3) ## rlang 0.4.10 2022-02-15 [1] Github (r-lib/rlang@f0c9be5) ## rmarkdown 2.10 2022-02-15 [1] Github (rstudio/rmarkdown@02d3c25) ## rprojroot 2.0.2 2020-11-15 [1] CRAN (R 4.0.2) ## sessioninfo 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [1] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [1] RSPM (R 4.0.3) ## testthat 3.0.1 2022-02-15 [1] Github (R-lib/testthat@e99155a) ## usethis 2.1.5.9000 2022-02-15 [1] Github (r-lib/usethis@57b109a) ## withr 2.3.0 2020-09-22 [1] RSPM (R 4.0.2) ## xfun 0.26 2022-02-15 [1] Github (yihui/xfun@74c2a66) ## yaml 2.2.1 2020-02-01 [1] RSPM (R 4.0.3) ## ## [1] /usr/local/lib/R/site-library ## [2] /usr/local/lib/R/library "],["references.html", "Chapter 5 References", " Chapter 5 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
